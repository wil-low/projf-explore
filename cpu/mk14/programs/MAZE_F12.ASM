	.CR	SCMP
	.TF	MAZE.HEX,INT
	.LF	MAZE.LST
; *****************************************************************************
;Maze
;Mr. G.PHILLIPS
;from Computing Today - May 1979

;The program is developed to run on an MK/14 but could be
;easily altered to suit any machine.  The idea is to negotiate a
;maze without being eaten on falling down holes etc. To code
;your own mazes draw them out complete with the obstacles
;and code from start to finishe including the comments on any
;obstacles etc.  After hazards you can either return to the start
;or kill off the victim in an endless loop.

;POINTERS
;P1	Current message
;P2	Maze position
;P3	Keyboard/display
;Note:  Abort will not work as the monitor routine is not
;	used. Maze frm 0F80 onwards, could be relocated.
;	Messages from 0B00 to 0BF8 as required

;From Complement and Add - Issue 4
;Mr Phillips was the editor of this User Group Magazine for the MK14

;Also, since no rules were published about Maze in CT, here is a brief summary
;When a question is asked, e.g. 'Ford lft?' you must reply 0 for the first
;option, 1 for the second option. So in this example, 1 would mean that you
;wanted to go left whereas in the question 'Left-rt?’ it would mean go right. The
;game ends when "END" is displayed. Comments are displayed E.g. ‘Bench’ that
;require no answer.
;
;Dissasembled and Typed in for SBASM by T.J.Gilberts July 2020

	.OR	0x0F10

COUNT1	.DB	0
COUNT	.DB	0

ENTER:
	LDI	0x00		;Initialise count 1 to zero
	ST	COUNT1-$-1(P0)

BEGIN:
	LDI	0x0F		;Load maze address to P2
	XPAH	P2
	LDI	0x80			
	XPAL	P2

	LDI	0x0D		;Load display address to P3
	XPAH	P3
	LDI	0x00
	XPAL	P3
LOOP2:
	LDI	0x0B		;Load message address to P1
	XPAH	P1		;Relies on P1L being 0 on RESET
	LD	@0x01(P2)	;Get first maze section
	XAE
	LDE
	XPAL	P1		;Also use as message pointer

LOOP8:
	LDI	0x08		;Let count=8
	ST	COUNT-$-1(P0)
	
LOOP1:
	LD	@0x01(P1)	;Load one character, display
	ST	@0x01(P3)
SHINEIT:
	DLY	0x01		;Shine it
	DLD	COUNT-$-1(P0)
	JNZ	LOOP1
	
	LD	-1(P2)		;Restore P1
	XPAL	P1
	LDI	0x00		;Restore P3
	XPAL	P3
	LD	0(P2)		;Is second part of maze code
	JNZ	FOR8		
		
	DLD	COUNT1-$-1(P0)	
	JNZ	LOOP8		;00, if not display message

	LD	@0x01(P2)	;Next part of maze
	JMP	LOOP2		;Go to 0F22
	
FOR8:
	LD	-1(P2)		;If code positive jump 2
	JP	FOR2

	JMP	FOR4		;If code negative jump 4

FOR2:
	ANI	0x01		;Odd or even, if even jump 6
	JZ	FOR1

FOR4:
	LD	@E(P2)		;Alter P2 accordingly
	LD	@-1(P2)

	JMP	LOOP2

FOR1:
	LDE			;If code 00xx back to start
	JZ	BEGIN		

	ILD	0x00(P3)	;Input 0? INC P3, load
	JZ	SKIP4
	
	LD	@0x01(P2)	;Continue in maze
	JMP	SKIP2		;Jump 6

SKIP4:
	ILD	0x01(P3)	;Input 1?
	JNZ	SKIP2		;Jump 2

	JMP	LOOP8

SKIP2:
	DLY	0xFF
	JMP	LOOP2	


;EXAMPLE MAZE
;This would fit in the IO chip giving quite a bit of space for the above
;interpreter to do more 'game play' of wanted...

	.OR	0x0F80	

	.DB	0x80,0x00,0x18,0x41,0xA0,0x00,0x18,0x45
	.DB	0x68,0x00,0x10,0x55,0x88,0x00,0x90,0x00
	.DB	0x18,0x0F,0x10,0x09,0xC0,0x00,0xC8,0x00
	.DB	0xD0,0x00,0x00,0x01,0x20,0xE7,0xE2,0x01
	.DB	0x20,0x35,0x88,0x00,0x98,0x00,0x10,0x35
	.DB	0x58,0x00,0x18,0xF7,0x20,0xE5,0x60,0x00
	.DB	0x18,0x2F,0x68,0x00,0x10,0x17,0xA8,0x00
	.DB	0x88,0x00,0x90,0x00,0xA0,0x00,0x60,0x00
	.DB	0x10,0x03,0xBE,0x01,0x20,0x03,0xCE,0x01
	.DB	0x10,0xD7,0xE4,0x01,0x20,0x03,0xDA,0x01
	
;LITERAL POOL FOR MESSAGES
;Note:	Not all of these are used in the example program,
;	but should you wish to invent your own maze you
;	could use them where you like. The ones used in
;	the example are marked *

	.OR	0x0B00
	
	.DB	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;Not used
	.DB	0x00,0x76,0x76,0x76,0x76,0x76,0x76,0x77 ;'ahhhhhh'*
	.DB	0x53,0x78,0x71,0x38,0x40,0x5E,0x50,0x71 ;'frd-lft?'*
	.DB	0x53,0x78,0x50,0x40,0x5E,0x50,0x3F,0x71 ;'ford-rt?'*
	.DB	0x53,0x78,0x50,0x40,0x78,0x71,0x79,0x38 ;'left-rt?'*
	.DB	0x00,0x00,0x79,0x38,0x5E,0x5E,0x1C,0x73 ;'puddle'*
	.DB	0x5E,0x54,0x79,0x40,0x5E,0x77,0x79,0x5E ;'dead-end'
	.DB	0x6E,0x50,0x79,0x73,0x73,0x06,0x38,0x6D ;'slippery'
	.DB	0x73,0x1C,0x40,0x79,0x73,0x3F,0x38,0x6D ;'slope-up'
	.DB	0x00,0x38,0x38,0x06,0x76,0x73,0x1C,0x00 ;'uphill'
	.DB	0x00,0x7C,0x1C,0x50,0x76,0x6D,0x00,0x00 ;'shrub'
	.DB	0x00,0x78,0x50,0x5E,0x54,0x79,0x7C,0x00 ;'bendrt'*
	.DB	0x78,0x71,0x79,0x38,0x5E,0x54,0x79,0x7C ;'bendleft'*
	.DB	0x00,0x79,0x1C,0x78,0x77,0x78,0x6D,0x00 ;'statue'*
	.DB	0x00,0x5E,0x54,0x79,0x00,0x79,0x76,0x78 ;'the end'*
	.DB	0x00,0x76,0x39,0x54,0x79,0x7C,0x00,0x00 ;'bench'
	.DB	0x00,0x00,0x78,0x50,0x77,0x78,0x6D,0x00 ;'start'*
	.DB	0x79,0x76,0x78,0x5E,0x54,0x1C,0x3F,0x50 ;'roundthe'*
	.DB	0x00,0x50,0x79,0x54,0x50,0x3F,0x39,0x00 ;'corner'*
	.DB	0x00,0x00,0x5E,0x54,0x79,0x7C,0x00,0x00 ;'bend'*
	.DB	0x54,0x06,0x77,0x78,0x54,0x1C,0x3F,0x71 ;'fountain'*
	.DB	0x00,0x6F,0x54,0x06,0x54,0x50,0x1C,0x78 ;'turning'*
	.DB	0x00,0x00,0x5E,0x54,0x1C,0x3F,0x50,0x00 ;'round'*
	.DB	0x00,0x50,0x79,0x6F,0x06,0x78,0x00,0x77 ;'A tiger'
	.DB	0x54,0x3F,0x06,0x38,0x00,0x79,0x76,0x78 ;'the lion'*
	.DB	0x1C,0x3F,0x6E,0x00,0x6D,0x78,0x77,0x79 ;'eats you'*
	.DB	0x79,0x6D,0x3F,0x38,0x00,0x1C,0x3F,0x6E ;'you lose'*
	.DB	0x00,0x5E,0x54,0x1C,0x3F,0x50,0x6F,0x00 ;'ground'
	.DB	0x00,0x00,0x6E,0x5E,0x5E,0x1C,0x55,0x00 ;'muddy'
	.DB	0x00,0x6D,0x6D,0x79,0x38,0x5E,0x54,0x79 ;'endless'*
	.DB	0x00,0x00,0x00,0x78,0x06,0x73,0x00,0x00 ;'pit'*

; Add code to hex for SH PI-Programmer to auto execute after load...

	.ORG	0xFFFE
	.DB 	ENTER/256
	.DB 	ENTER&255
	
	.EN
